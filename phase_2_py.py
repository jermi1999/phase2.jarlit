# -*- coding: utf-8 -*-
"""phase 2 py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u_VZ76E0Bx_c6bT_LeFhZOA1l-j3oc9l
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

def download_stock_data(ticker='AAPL', start='2015-01-01', end='2024-12-31'):
    df = yf.download(ticker, start=start, end=end)
    df = df.dropna()  # Drop any missing rows (just to be safe)
    return df

def prepare_data(df, feature='Close', sequence_length=60):
    data = df[[feature]].values
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)

    X, y = [], []
    for i in range(sequence_length, len(scaled_data)):
        X.append(scaled_data[i-sequence_length:i, 0])
        y.append(scaled_data[i, 0])

    X, y = np.array(X), np.array(y)
    X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # [samples, timesteps, features]
    return X, y, scaler

def build_lstm_model(input_shape):
    model = Sequential()
    model.add(LSTM(50, return_sequences=True, input_shape=input_shape))
    model.add(LSTM(50))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

def plot_predictions(actual, predicted):
    plt.figure(figsize=(12,6))
    plt.plot(actual, color='blue', label='Actual Stock Price')
    plt.plot(predicted, color='red', label='Predicted Stock Price')
    plt.title('Stock Price Prediction')
    plt.xlabel('Time')
    plt.ylabel('Stock Price')
    plt.legend()
    plt.show()

ticker = 'AAPL'
df = download_stock_data(ticker)

# Use closing price and prepare dataset
sequence_length = 60
X, y, scaler = prepare_data(df, sequence_length=sequence_length)

# Split into train/test (80/20 split)
split = int(len(X) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Build and train the model
model = build_lstm_model((X_train.shape[1], 1))
history = model.fit(X_train, y_train, epochs=20, batch_size=32, verbose=1, validation_data=(X_test, y_test))

# Predict and invert scaling
predicted = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted)
actual_prices = scaler.inverse_transform(y_test.reshape(-1, 1))

# Plot the results
plot_predictions(actual_prices, predicted_prices)